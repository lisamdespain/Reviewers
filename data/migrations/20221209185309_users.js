/**
 * @param { import("knex").Knex } knex
 * @returns { Promise<void> }
 */
exports.up = function(knex) {
  return knex.schema
    .createTable('users', tbl=>{
        tbl.increments('user_id')
        tbl.varchar('username', 128).unique().notNullable()
        tbl.varchar('first_name', 64).notNullable()
        tbl.varchar('last_name', 64).notNullable()
        tbl.varchar('email', 128).unique().notNullable()
        tbl.varchar('phone', 13)
        tbl.boolean('phone_notifications').notNullable()
        tbl.varchar('avatar', 128).notNullable()
        tbl.varchar('website', 128)
    })
    .createTable('user_types', tbl=>{
        tbl.increments('type_id')
        tbl.varchar('type_name', 128).unique().notNullable()
    })
    .createTable('user_types_connection', tbl=>{
        tbl.integer('user_id')
          .unsigned()
          .notNullable().references('user_id')
          .inTable('users')
          .onDelete('CASCADE')
          .onUpdate('CASCADE')
        tbl.integer('type_id')
          .unsigned()
          .notNullable().references('type_id')
          .inTable('user_types')
          .onDelete('CASCADE')
          .onUpdate('CASCADE')  
        tbl.primary(['user_id','type_id'])
    })
    .createTable('genres', tbl=>{
        tbl.increments('genre_id');
        tbl.varchar('genre_name', 128).unique().notNullable()
        tbl.varchar('genre_description', 256).notNullable()
    })
    .createTable('books', tbl=>{
        tbl.increments('book_id')
        tbl.varchar('book_title', 128).notNullable()
        tbl.varchar('isbn', 13).unique()
        tbl.varchar('amazon_id', 128).unique().notNullable()
        tbl.varchar('cover_link', 256).notNullable()
        tbl.varchar('book_description', 1024).notNullable()
        tbl.integer('number_of_pages').notNullable()
        tbl.varchar('file_upload_link', 128)
        tbl.varchar('why_review', 1024)
    })
    .createTable('book_genres', tbl=>{
        tbl.integer('book_id')
          .unsigned()
          .notNullable().references('book_id')
          .inTable('books')
          .onDelete('CASCADE')
          .onUpdate('CASCADE')
        tbl.integer('genre_id')
          .unsigned()
          .notNullable().references('genre_id')
          .inTable('genres')
          .onDelete('CASCADE')
          .onUpdate('CASCADE')  
        tbl.primary(['book_id', 'genre_id'])
    })
    .createTable('markets', tbl=>{
      tbl.increments('market_id')
      tbl.varchar('market_name', 128).unique().notNullable()
  })
    .createTable('book_market_links', tbl=>{
        tbl.integer('book_id')
          .unsigned()
          .notNullable().references('book_id')
          .inTable('books')
          .onDelete('CASCADE')
          .onUpdate('CASCADE')
        tbl.integer('market_id')
          .unsigned()
          .notNullable().references('market_id')
          .inTable('markets')
          .onDelete('CASCADE')
          .onUpdate('CASCADE')
        tbl.varchar('link_url', 256).unique().notNullable()
        tbl.primary(['book_id', 'market_id'])
    })
    .createTable('author_books', tbl=>{
        tbl.integer('user_id')
          .unsigned()
          .notNullable().references('user_id')
          .inTable('users')
          .onDelete('CASCADE')
          .onUpdate('CASCADE')
        tbl.integer('book_id')
          .unsigned()
          .notNullable().references('book_id')
          .inTable('books')
          .onDelete('CASCADE')
          .onUpdate('CASCADE')
        tbl.primary(['user_id', 'book_id'])
    })
    .createTable('reviewer_books', tbl=>{
        tbl.integer('user_id')
          .unsigned()
          .notNullable().references('user_id')
          .inTable('users')
          .onDelete('CASCADE')
          .onUpdate('CASCADE')
        tbl.integer('book_id')
          .unsigned()
          .notNullable().references('book_id')
          .inTable('books')
          .onDelete('CASCADE')
          .onUpdate('CASCADE')
        tbl.primary(['user_id', 'book_id'])
    })
    .createTable('user_genre', tbl=>{
        tbl.integer('user_id')
          .unsigned()
          .notNullable().references('user_id')
          .inTable('users')
          .onDelete('CASCADE')
          .onUpdate('CASCADE')
        tbl.integer('genre_id')
          .unsigned()
          .notNullable().references('genre_id')
          .inTable('genres')
          .onDelete('CASCADE')
          .onUpdate('CASCADE')
        tbl.primary(['user_id', 'genre_id'])
    })
    .createTable('status', tbl=>{
        tbl.increments('status_id');     
        tbl.varchar('status_name', 128).notNullable()
    })
    .createTable('requests', tbl=>{
      tbl.integer('who_requested')
        .notNullable().references('user_id')
        .inTable('users')
        .onDelete('CASCADE')
        .onUpdate('CASCADE')
      tbl.integer('who_received_request')
        .notNullable().references('user_id')
        .inTable('users')
        .onDelete('CASCADE')
        .onUpdate('CASCADE')
      tbl.integer('book_id')
        .unsigned()
        .notNullable().references('book_id')
        .inTable('books')
      tbl.integer('status_id')
        .unsigned()
        .notNullable().references('status_id')
        .inTable('status')  
      tbl.varchar('request_text', 1024).notNullable()
      tbl.primary(['who_requested', 'book_id'])
  })
    .createTable('rewards', tbl=>{
        tbl.increments('reward_id')  
        tbl.varchar('reward_name', 128).notNullable()
    })
    .createTable('reward_user', tbl=>{
        tbl.integer('reward_id')
          .unsigned()
          .notNullable().references('reward_id')
          .inTable('rewards')
          .onDelete('CASCADE')
          .onUpdate('CASCADE')
        tbl.integer('user_id')
          .unsigned()
          .notNullable().references('user_id')
          .inTable('users')
          .onDelete('CASCADE')
          .onUpdate('CASCADE')
        tbl.primary(['reward_id', 'user_id'])
    })
};

/**
 * @param { import("knex").Knex } knex
 * @returns { Promise<void> }
 */
exports.down = function(knex) {
    return knex.schema
    .dropTableIfExists('reward_user')
    .dropTableIfExists('rewards')
    .dropTableIfExists('status')
    .dropTableIfExists('requests')
    .dropTableIfExists('user_genre')
    .dropTableIfExists('reviewer_books')
    .dropTableIfExists('author_books')
    .dropTableIfExists('book_market_links')
    .dropTableIfExists('markets')
    .dropTableIfExists('book_genres')
    .dropTableIfExists('books')
    .dropTableIfExists('genres')
    .dropTableIfExists('user_types_connection')
    .dropTableIfExists('user_types')
    .dropTableIfExists('users')
  
};
